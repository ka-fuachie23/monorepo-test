name: monorepo test build deploy cd

on:
  push:
    branches:
      - "release_**"

jobs:
  check-changes:
    name: Check Package Changes
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install Yarn
        run: corepack enable

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Get release branches and compare
        id: get-changes
        run: |
          # Get the release branches
          LATEST_RELEASES=$(git branch -r | grep "origin/release_" | sed 's/origin\///' | sort -rV | head -n 2)
          
          # Convert to array
          readarray -t BRANCHES <<< "$LATEST_RELEASES"
          
          if [ ${#BRANCHES[@]} -eq 0 ]; then
            echo "::warning::No release branches found"
            echo "changed_packages=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          LATEST_RELEASE=$(echo "${BRANCHES[0]}" | xargs)
          
          if [ ${#BRANCHES[@]} -eq 1 ]; then
            # If only one release branch exists, compare against main/master
            echo "Only one release branch found: $LATEST_RELEASE"
            # First try to get the default branch name
            DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
            CHANGED_PACKAGES=$(yarn lerna ls --since origin/$DEFAULT_BRANCH --json || echo "[]")
          else
            # If multiple release branches exist, compare against previous
            PREVIOUS_RELEASE=$(echo "${BRANCHES[1]}" | xargs)
            echo "Latest release: $LATEST_RELEASE"
            echo "Previous release: $PREVIOUS_RELEASE"
            CHANGED_PACKAGES=$(yarn lerna ls --since "$PREVIOUS_RELEASE" --json || echo "[]")
          fi
          
          # Handle empty output from lerna
          if [ -z "$CHANGED_PACKAGES" ]; then
            CHANGED_PACKAGES="[]"
          fi
          
          # Ensure we have valid JSON before passing to jq
          if echo "$CHANGED_PACKAGES" | jq empty 2>/dev/null; then
            ESCAPED_PACKAGES=$(echo "$CHANGED_PACKAGES" | jq -c .)
          else
            ESCAPED_PACKAGES="[]"
          fi
          
          echo "changed_packages=$ESCAPED_PACKAGES" >> $GITHUB_OUTPUT
          
          # Also output human-readable format to logs
          echo "Changed packages:"
          if [ "$ESCAPED_PACKAGES" != "[]" ]; then
            echo "$CHANGED_PACKAGES" | jq -r '.[].name'
          else
            echo "No changes detected"
          fi

      - name: Create summary
        run: |
          echo "## Package Changes Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.get-changes.outputs.changed_packages }}" == "[]" ]; then
            echo "No package changes detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "Changes detected in the following packages:" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.get-changes.outputs.changed_packages }}" | jq '.' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
